import edu.unifi.model.entities.Room;
import edu.unifi.model.entities.Table;
import edu.unifi.model.entities.TableState;
import edu.unifi.model.orm.DatabaseAccess;
import edu.unifi.model.orm.dao.RoomDAO;
import edu.unifi.model.orm.dao.TableDAO;
import org.hibernate.Session;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class TableDAOTest {

    private TableDAO tableDAO;
    private RoomDAO roomDAO;

    @BeforeEach
    public void setUp() {
        DatabaseAccess.setHibernateConfigFileToTest();
        DatabaseAccess.initiate();
        roomDAO = RoomDAO.getInstance();
        tableDAO = TableDAO.getInstance();
    }

    @Test
    public void insertTest() {

        Table table = new Table();
        Room room = new Room("TestRoom");

        //Not necessary to setId because it automatically generated by Hibernate
        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);

        roomDAO.insert(room);
        tableDAO.insert(table);

        assertNotNull(tableDAO.getById(table.getId()));

        //reset the previous state of the database
        tableDAO.delete(table);
        roomDAO.delete(room);



    }

    @Test
    public void deleteTest() {

        Table table = new Table();
        Room room = new Room("TestRoom");

        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);

        roomDAO.insert(room);
        tableDAO.insert(table);
        tableDAO.delete(table);
        roomDAO.delete(room);

        assertNull(tableDAO.getById(table.getId()));

    }

    @Test
    public void updateTest() {

        Table table = new Table();

        Room room1 = new Room("TestRoom1");
        Room room2 = new Room("TestRoom2");

        //Not necessary to setId because it automatically generated by Hibernate
        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room1);

        roomDAO.insert(room1);
        roomDAO.insert(room2);
        tableDAO.insert(table);

        table.setNOfSeats(4);
        table.setName("TestTableUpdated");
        table.setState(TableState.RESERVED);
        table.setRoom(room2);
        tableDAO.update(table);

        assertEquals(tableDAO.getById(table.getId()).getNOfSeats(), 4);
        assertEquals(tableDAO.getById(table.getId()).getName(), "TestTableUpdated");
        assertEquals(tableDAO.getById(table.getId()).getState(), TableState.RESERVED);
        assertEquals(tableDAO.getById(table.getId()).getRoom().getName(), room2.getName());

        //reset the previous state of the database
        tableDAO.delete(table);
        roomDAO.delete(room1);
        roomDAO.delete(room2);

    }

    @Test
    public void deleteByIdTest() {

        Table table = new Table();
        Room room = new Room("TestRoom");

        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);

        roomDAO.insert(room);
        tableDAO.insert(table);

        tableDAO.deleteById(table.getId());

        assertNull(tableDAO.getById(table.getId()));

        //reset the previous state of the database
        roomDAO.delete(room);
    }

    @Test
    public void getByIdTest() {

        Table table = new Table();
        Room room = new Room("TestRoom");

        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);

        roomDAO.insert(room);
        tableDAO.insert(table);

        assertEquals(tableDAO.getById(table.getId()).getId(), table.getId());
        assertEquals(tableDAO.getById(table.getId()).getNOfSeats(), table.getNOfSeats());
        assertEquals(tableDAO.getById(table.getId()).getName(), table.getName());
        assertEquals(tableDAO.getById(table.getId()).getState(), table.getState());
        assertEquals(tableDAO.getById(table.getId()).getRoom().getName(), table.getRoom().getName());

        //reset the previous state of the database
        tableDAO.delete(table);
        roomDAO.delete(room);
    }
}


import edu.unifi.model.entities.Check;
import edu.unifi.model.entities.Room;
import edu.unifi.model.entities.Table;
import edu.unifi.model.entities.TableState;
import edu.unifi.model.orm.DatabaseAccess;
import edu.unifi.model.orm.dao.CheckDAO;
import edu.unifi.model.orm.dao.RoomDAO;
import edu.unifi.model.orm.dao.TableDAO;
import org.assertj.core.util.DateUtil;
import org.hibernate.Session;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.time.temporal.TemporalUnit;

import static org.junit.jupiter.api.Assertions.*;

public class CheckDAOTest {

    private CheckDAO checkDAO;
    private TableDAO tableDAO;
    private RoomDAO roomDAO;

    @BeforeEach
    public void setUp() {
        DatabaseAccess.setHibernateConfigFileToTest();
        DatabaseAccess.initiate();
        checkDAO = CheckDAO.getInstance();
        roomDAO = RoomDAO.getInstance();
        tableDAO = TableDAO.getInstance();
    }

    @Test
    public void insertTest() {

        Check check = new Check();
        Table table = new Table();
        Room room = new Room("TestRoom");
        LocalDateTime localDateTime = LocalDateTime.now();

        //Not necessary to setId because it automatically generated by Hibernate
        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);
        check.setIssueDate(localDateTime);
        check.setTable(table);

        roomDAO.insert(room);
        tableDAO.insert(table);
        checkDAO.insert(check);
        assertNotNull(checkDAO.getById(check.getId()));

        //reset the previous state of the database
        checkDAO.delete(check);
        tableDAO.delete(table);
        roomDAO.delete(room);
    }

    @Test
    public void deleteTest() {

        Check check = new Check();
        Table table = new Table();
        Room room = new Room("TestRoom");
        LocalDateTime localDateTime = LocalDateTime.now();

        //Not necessary to setId because it automatically generated by Hibernate
        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);
        check.setIssueDate(localDateTime);
        check.setTable(table);

        roomDAO.insert(room);
        tableDAO.insert(table);
        checkDAO.insert(check);
        checkDAO.delete(check);

        assertNull(checkDAO.getById(check.getId()));

        //reset the previous state of the database

        tableDAO.delete(table);
        roomDAO.delete(room);
    }

    @Test
    public void updateTest() {

        Check check = new Check();
        Table table1 = new Table();
        Table table2 = new Table();
        Room room = new Room("TestRoom");
        LocalDateTime localDateTime1 = LocalDateTime.now();

        //Not necessary to setId because it automatically generated by Hibernate
        table1.setNOfSeats(2);
        table1.setName("TestTable1");
        table1.setState(TableState.FREE);
        table1.setRoom(room);
        table2.setNOfSeats(4);
        table2.setName("TestTable2");
        table2.setState(TableState.RESERVED);
        table2.setRoom(room);
        LocalDateTime localDateTime2 = LocalDateTime.now();
        check.setIssueDate(localDateTime1);
        check.setTable(table1);

        roomDAO.insert(room);
        tableDAO.insert(table1);
        tableDAO.insert(table2);
        checkDAO.insert(check);

        check.setIssueDate(localDateTime2);
        check.setTable(table2);

        checkDAO.update(check);
        assertTrue(checkDAO.getById(check.getId()).getIssueDate().isEqual(check.getIssueDate()));
        assertEquals(checkDAO.getById(check.getId()).getTable().getId(), check.getTable().getId());

        //reset the previous state of the database
        checkDAO.delete(check);
        tableDAO.delete(table1);
        tableDAO.delete(table2);
        roomDAO.delete(room);
    }

    @Test
    public void getByIdTest() {

        Check check = new Check();
        Table table = new Table();
        Room room = new Room("TestRoom");
        LocalDateTime localDateTime = LocalDateTime.now();

        //Not necessary to setId because it automatically generated by Hibernate
        table.setNOfSeats(2);
        table.setName("TestTable");
        table.setState(TableState.FREE);
        table.setRoom(room);
        check.setIssueDate(localDateTime);
        check.setTable(table);

        roomDAO.insert(room);
        tableDAO.insert(table);
        checkDAO.insert(check);

        assertTrue(checkDAO.getById(check.getId()).getIssueDate().isEqual(localDateTime));
        assertEquals(checkDAO.getById(check.getId()).getTable().getId(), table.getId());

        //reset the previous state of the database
        checkDAO.delete(check);
        tableDAO.delete(table);
        roomDAO.delete(room);
    }
}
